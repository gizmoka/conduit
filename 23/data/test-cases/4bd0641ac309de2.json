{
  "uid" : "4bd0641ac309de2",
  "name" : "test_data_input_from_file",
  "fullName" : "test-conduit.test_10_import_data_input_from_file#test_data_input_from_file",
  "historyId" : "c95c5edd511c638af8914b85a060c0bb",
  "time" : {
    "start" : 1628688462210,
    "stop" : 1628688516028,
    "duration" : 53818
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert None == 'An awesome title for my article'",
  "statusTrace" : "def test_data_input_from_file():\n        browser_options = Options()\n        browser_options.headless = True\n        browser = webdriver.Chrome(ChromeDriverManager().install(), options=browser_options)\n        URL = \"http://conduitapp.progmasters.hu:1667/#/\"\n        browser.get(URL)\n        browser.implicitly_wait(10)\n    \n        # Előfeltételek\n        accepting_cookies(browser)\n        # conduit_registration(browser)\n        conduit_login(browser)\n        time.sleep(2)\n        # TC4: Ismételt és sorozatos adatbevitel adatforrásból, 1 blogpost feltöltése betöltése txt fájlból\n        ## step1: new article-ra rákattintunk\n        browser.find_element_by_css_selector(\"a[href='#/editor']\").click()\n    \n        ## step2: betölteni a blogpost.csv-ből soronként az adatokat a megfelelő input mezőbe\n    \n        with open('blogpost.csv', encoding='utf-8') as bp_file:\n            csv_reader = csv.reader(bp_file, delimiter='/')\n            for row in csv_reader:\n                article_title = browser.find_element_by_css_selector(\"input[placeholder='Article Title']\").send_keys(row[0])\n                article_summary = browser.find_element_by_xpath('//input[starts-with(@placeholder,\"What\")]').send_keys(row[1])\n                article_body = browser.find_element_by_css_selector(\"textarea[placeholder='Write your article (in markdown)']\").send_keys(row[2])\n                article_tag = browser.find_element_by_css_selector(\"input[placeholder='Enter tags']\").send_keys(row[3])\n                browser.find_element_by_css_selector(\"button[type='submit']\").click()\n    \n>               assert article_title == \"An awesome title for my article\"\nE               AssertionError: assert None == 'An awesome title for my article'\n\ntest-conduit/test_10_import_data_input_from_file.py:36: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert None == 'An awesome title for my article'",
    "statusTrace" : "def test_data_input_from_file():\n        browser_options = Options()\n        browser_options.headless = True\n        browser = webdriver.Chrome(ChromeDriverManager().install(), options=browser_options)\n        URL = \"http://conduitapp.progmasters.hu:1667/#/\"\n        browser.get(URL)\n        browser.implicitly_wait(10)\n    \n        # Előfeltételek\n        accepting_cookies(browser)\n        # conduit_registration(browser)\n        conduit_login(browser)\n        time.sleep(2)\n        # TC4: Ismételt és sorozatos adatbevitel adatforrásból, 1 blogpost feltöltése betöltése txt fájlból\n        ## step1: new article-ra rákattintunk\n        browser.find_element_by_css_selector(\"a[href='#/editor']\").click()\n    \n        ## step2: betölteni a blogpost.csv-ből soronként az adatokat a megfelelő input mezőbe\n    \n        with open('blogpost.csv', encoding='utf-8') as bp_file:\n            csv_reader = csv.reader(bp_file, delimiter='/')\n            for row in csv_reader:\n                article_title = browser.find_element_by_css_selector(\"input[placeholder='Article Title']\").send_keys(row[0])\n                article_summary = browser.find_element_by_xpath('//input[starts-with(@placeholder,\"What\")]').send_keys(row[1])\n                article_body = browser.find_element_by_css_selector(\"textarea[placeholder='Write your article (in markdown)']\").send_keys(row[2])\n                article_tag = browser.find_element_by_css_selector(\"input[placeholder='Enter tags']\").send_keys(row[3])\n                browser.find_element_by_css_selector(\"button[type='submit']\").click()\n    \n>               assert article_title == \"An awesome title for my article\"\nE               AssertionError: assert None == 'An awesome title for my article'\n\ntest-conduit/test_10_import_data_input_from_file.py:36: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "7fb4e8164c3d983b",
      "name" : "log",
      "source" : "7fb4e8164c3d983b.txt",
      "type" : "text/plain",
      "size" : 642
    }, {
      "uid" : "cd1ffcf8f5c60fb4",
      "name" : "stderr",
      "source" : "cd1ffcf8f5c60fb4.txt",
      "type" : "text/plain",
      "size" : 435
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test-conduit"
  }, {
    "name" : "suite",
    "value" : "test_10_import_data_input_from_file"
  }, {
    "name" : "host",
    "value" : "fv-az28-873"
  }, {
    "name" : "thread",
    "value" : "3904-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test-conduit.test_10_import_data_input_from_file"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "4bd0641ac309de2.json",
  "parameterValues" : [ ]
}